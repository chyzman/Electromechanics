plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url = "https://maven.wispforest.io" }
    maven {
        url = "https://api.modrinth.com/maven"
        content { includeGroup "maven.modrinth" }
    }
    maven { url = "https://maven.maxhenkel.de/repository/public" }
    maven { url = "https://jitpack.io" }
    maven { url "https://maven.shedaniel.me/" }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}") { exclude group: "net.fabricmc.fabric-api" }
    include("io.wispforest:owo-sentinel:${project.owo_version}")

    implementation include("net.objecthunter:exp4j:${project.exp4j_version}")

    modImplementation("maven.modrinth:lithium:${project.lithium}")

    modLocalRuntime("maven.modrinth:modmenu:${project.modmenu}")

    modLocalRuntime("maven.modrinth:rei:${project.rei}")
    modLocalRuntime("maven.modrinth:cloth-config:${project.cloth}")
    modLocalRuntime("me.shedaniel.cloth:basic-math:0.6.1")
    modLocalRuntime("maven.modrinth:architectury-api:${project.arch_api}")


    include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.1.1")))
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}


loom {
    accessWidenerPath = file("src/main/resources/electromechanics.accesswidener")

    runs {
        client_mixin {
            client()
            ideConfigGenerated true
            name = "[${project.archivesBaseName}] Client - (Mixin Swap)"
            source sourceSets.main
            vmArg "-Dmixin.debug.export=true"

            try {
                afterEvaluate {
                    def mixinDep = this.configurations.compileClasspath
                            .allDependencies
                            .findAll { it.name == "sponge-mixin" }
                            .first()

                    if (mixin != null) {
                        def mixinPath = this.configurations.compileClasspath.files(mixinDep).first().path;

                        println(mixinPath)

                        vmArg("-javaagent:\"${mixinPath}\"")

                        println("[Info]: Mixin Hotswap Run should be working")
                    } else {
                        println("[Warning]: Unable to locate file path for Mixin Jar, HotSwap Run will not work!!!")
                    }
                }
            } catch (Exception e) {
                println("[Error]: MixinHotswap Run had a issue!")
                e.printStackTrace()
            }
        }
        seperateFolderServer {
            inherit server
            name "Minecraft Server: Other"
            runDir "run_server"
        }
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"

            runDir "build/datagen"
        }
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
    }
}